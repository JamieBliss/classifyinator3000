/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/files/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Files */
        get: operations["list_files_files_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload File */
        post: operations["upload_file_files_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/status/{file_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check File Status */
        get: operations["check_file_status_files_status__file_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_upload_file_files_upload_post */
        Body_upload_file_files_upload_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /**
         * ClassificationLabel
         * @enum {string}
         */
        ClassificationLabel: ClassificationLabel;
        /** FileClassificationRead */
        FileClassificationRead: {
            /** Id */
            id: number;
            classification: components["schemas"]["ClassificationLabel"];
            /** Classification Score */
            classification_score: number;
        };
        /** FileRecord */
        FileRecord: {
            /** Id */
            id?: number | null;
            /** Filename */
            filename: string;
            /** File Contents */
            file_contents: string;
            /** @default Processing */
            status: components["schemas"]["FileStatus"];
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
        };
        /** FileRecordWithClassifications */
        FileRecordWithClassifications: {
            /** Id */
            id: number;
            /** Filename */
            filename: string;
            status: components["schemas"]["FileStatus"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Classifications
             * @default []
             */
            classifications: components["schemas"]["FileClassificationRead"][];
        };
        /**
         * FileStatus
         * @enum {string}
         */
        FileStatus: FileStatus;
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaBodyUploadFileFilesUploadPost = components['schemas']['Body_upload_file_files_upload_post'];
export type SchemaClassificationLabel = components['schemas']['ClassificationLabel'];
export type SchemaFileClassificationRead = components['schemas']['FileClassificationRead'];
export type SchemaFileRecord = components['schemas']['FileRecord'];
export type SchemaFileRecordWithClassifications = components['schemas']['FileRecordWithClassifications'];
export type SchemaFileStatus = components['schemas']['FileStatus'];
export type SchemaHttpValidationError = components['schemas']['HTTPValidationError'];
export type SchemaValidationError = components['schemas']['ValidationError'];
export type $defs = Record<string, never>;
export interface operations {
    list_files_files_list_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileRecordWithClassifications"][];
                };
            };
        };
    };
    upload_file_files_upload_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_file_files_upload_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileRecord"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_file_status_files_status__file_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
export enum ClassificationLabel {
    Technical_Documentation = "Technical Documentation",
    Business_Proposal = "Business Proposal",
    Legal_Document = "Legal Document",
    Academic_Paper = "Academic Paper",
    General_Article = "General Article",
    Other = "Other"
}
export enum FileStatus {
    Processing = "Processing",
    Completed = "Completed",
    Failed = "Failed"
}
